
@book{Bourbaki98,
  title={Elements of the History of Mathematics},
  author={N. Bourbaki and Meldrum, J.},
  isbn={9783540647676},
  lccn={98039221},
  url={http://books.google.it/books?id=Qvo8-KC\_\_VAC},
  year={1998},
  publisher={U.S. Government Printing Office}
}

@article{Shao10,
   author = {Zhong Shao},
   title = {Certified Software},
   journal = {Communications of the ACM},
   year = {2010}
}
@article{Gonthier08,
   author = {Georges Gonthier},
   title = {Formal proofâ€“the four-color theorem.},
   journal = {Notices of the American Math- ematical Society},
   year = {2008}
}

@misc{Compcert,
  title = {{Inria} COMPCERT},
  howpublished = {\url{http://compcert.inria.fr/index.html}},
  note = {Accessed: 2014-31-01}
}
@misc{JSCert,
  title = {JSCert: Certified JavaScript},
  howpublished = {\url{http://http://jscert.org}},
  note = {Accessed: 2014-31-01}
}
@article{paulinintroduction,
  title={Introduction to the Coq proof-assistant for practical software verification},
  author={Paulin-Mohring, Christine}
}
@article{Moggi91,
 author = {Moggi, Eugenio},
 title = {Notions of Computation and Monads},
 journal = {Inf. Comput.},
 issue_date = {July 1991},
 volume = {93},
 number = {1},
 month = jul,
 year = {1991},
 issn = {0890-5401},
 pages = {55--92},
 numpages = {38},
 url = {http://dx.doi.org/10.1016/0890-5401(91)90052-4},
 doi = {10.1016/0890-5401(91)90052-4},
 acmid = {116984},
 publisher = {Academic Press, Inc.},
 address = {Duluth, MN, USA},
} 
@misc{Cybele,
  title = {Cybele},
  howpublished = {\url{http://cybele.gforge.inria.fr/}},
  note = {Accessed: 2014-04-02}
}

@article{claret:hal-00870110,
    url = {http://hal.inria.fr/hal-00870110},
    title = {{Lightweight proof by reflection using a posteriori simulation of effectful computation}},
    author = {Claret, Guillaume and Gonzalez Huesca, Lourdes Del Carmen and R{\'e}gis-Gianas, Yann and Ziliani, Beta},
    affiliation = {Preuves, Programmes et Syst{\`e}mes - PPS , PI.R2 - INRIA Paris - Rocquencourt , Max Planck Institute for Software Systems - MPI Software systems},
    booktitle = {{Interactive Theorem Proving}},
    address = {Rennes, France},
    audience = {internationale },
    year = {2013},
    month = Jul,
    pdf = {http://hal.inria.fr/hal-00870110/PDF/simulation-based-pbr-final.pdf},
}
@inproceedings{Dumas:2014:coqstates,
author = "Jean-Guillaume Dumas and Dominique Duval and Burak Ekici and
                  Damien Pous",
title = "Formal verification in {Coq} of program properties involving
                  the global state effect",
url = "http://hal.archives-ouvertes.fr/hal-00869230",
month = jan,
day = "8--11",
year = 2014,
category = "BA",
booktitle = "25e Journ\'ees Francophones des Langages Applicatifs, Fr\'ejus",
editor = "Christine Tasson",
}
@article{Dijkstra12,
    title = {{Experimentation project report:Translating Haskell programs to Coq programs}},
    year = 2012,
    month = dec,
    author = {Gabe Dijkstra},
    pdf = {http://www.students.science.uu.nl/~3860418/uu/08_infodtp/Coq-Verification-Challenge/reading/Hs2Gallina-GabeDijkstra.pdf},
}

@misc{interview1,
  title = {Hammer Principle, Programming Languages},
  howpublished = {\url{http://hammerprinciple.com/therighttool/statements/learning-this-language-significantly-changed-how-i}},
  note = {Accessed: 2014-04-02}
}
@misc{interview2,
  title = {Hammer Principle, Programming Languages},
  howpublished = {\url{http://hammerprinciple.com/therighttool/statements/i-would-recommend-most-programmers-learn-this-lang}},
  note = {Accessed: 2014-04-02}
}
@article{hughes:matters-cj,
	AUTHOR = {J. Hughes},
	TITLE = {{Why Functional Programming Matters}},
	JOURNAL = {Computer Journal},
	VOLUME = {32},
	NUMBER = {2},
        PAGES = {98--107},
	YEAR = {1989}
}

@misc{Nuprl,
  title = {PRL project: Proof/Program Refinement Logic},
  howpublished = {\url{http://www.nuprl.org/}},
  note = {Accessed: 2014-05-02}
}

@article{haskell98,
author = {Simon {Peyton Jones} and others},
title = {The {Haskell} 98 Language and Libraries: The Revised Report},
journal = {Journal of Functional Programming},
volume = 13,
number = 1,
pages = {0--255},
month = {Jan},
year = 2003,
note = {\url{http://www.haskell.org/definition/}},
}

@Article{Backus:1978:CPL,
  author =       "John Backus",
  title =        "Can Programming Be Liberated From the {von Neumann}
                 Style? {A} Functional Style and its Algebra of
                 Programs",
  journal =      j-CACM,
  volume =       "21",
  number =       "8",
  pages =        "613--641",
  month =        aug,
  year =         "1978",
  CODEN =        "CACMA2",
  DOI =          "http://doi.acm.org/10.1145/359576.359579",
  ISSN =         "0001-0782 (print), 1557-7317 (electronic)",
  bibdate =      "Mon Jan 22 06:22:32 MST 2001",
  bibsource =    "Compendex database;
                 ftp://ftp.ira.uka.de/pub/bibliography/Distributed/QLD/1978.bib;
                 ftp://ftp.ira.uka.de/pub/bibliography/Parallel/par.misc.bib;
                 http://dblp.uni-trier.de/db/journals/cacm/cacm21.html#Backus78;
                 http://www.math.utah.edu/pub/tex/bib/acm-turing-awards.bib",
  note =         "Reproduced in ``Selected Reprints on Dataflow and
                 Reduction Architectures'' ed. S. S. Thakkar, IEEE,
                 1987, pp. 215-243.",
  abstract =     "Conventional programming languages are growing ever
                 more enormous, but not stronger. Inherent defects at
                 the most basic level cause them to be both fat and
                 weak: their primitive word-at-a-time style of
                 programming inherited from their common ancestor, the
                 von Neumann computer; their division of programming
                 into a world of expressions and a world of statements;
                 their inability to effectively use powerful combining
                 forms for building new programs from existing ones; and
                 their lack of useful mathematical properties for
                 reasoning about programs. An alternative functional
                 style of programming is founded on the use of combining
                 forms for creating programs. Functional programs deal
                 with structured data, are often nonrepetitive and
                 nonrecursive, are hierarchically constructed, do not
                 name their arguments, and do not require the complex
                 machinery of procedure declarations to become generally
                 applicable. Combining forms can use high level programs
                 to build still higher level ones in a style not
                 possible in conventional languages.",
  acknowledgement = ack-nhfb,
  annote =       "Conventional programming languages are growing ever
                 more enormous, but not stronger. Inherent defects at
                 the most basic level cause them to be both fat and
                 weak: their primitive word-at-a-time style of
                 programming inherited from their common ancestor - the
                 von Neumann computer, their close coupling of semantics
                 to state transitions, their division of programming
                 into a world of expressions and a world of statements,
                 their inability to effectively \ldots{}",
  classcodes =   "C6140 (Programming languages)",
  classification = "723",
  corpsource =   "IMB Res. Lab., San Jose, CA, USA",
  descriptors =  "Programming language; reliability; future outlook; von
                 Neumann computer; applicative computing system;",
  journalabr =   "Commun ACM",
  keywords =     "4.29; 5.20; 5.24; 5.26; algebra of programs;
                 applicative computing systems; combining forms;
                 computer metatheory; conventional languages; CR
                 categories: 4.20; functional style; grecommended91; Key
                 words and phrases: functional programming;
                 metacomposition; models of computing systems; program
                 correctness; program termination; program
                 transformation; programming languages; Rhighnam;
                 structured data; theory ak; Turing Award Lecture; von
                 Neuman style; von Neumann computers; von Neumann
                 languages",
  oldlabel =     "Backus78",
  remark =       "This is the 1977 ACM Turing Award Lecture.",
  treatment =    "T Theoretical or Mathematical",
  XMLdata =      "ftp://ftp.informatik.uni-trier.de/pub/users/Ley/bib/records.tar.gz#journals/cacm/Backus78",
}